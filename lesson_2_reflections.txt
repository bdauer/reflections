What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates a .git file that tracks version histories.
	Now the directory in which the git init command was used is treated as a
	git repository and one can use git's version control with the project.
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is the place where work done in the working directory is stored
	prior to a commit. The commit adds it to the repository. By having a staging area,
	one can work and modify one's work across multiple files, and save those files,
	without creating a commit. This means that it's easier to experiment without
	breaking something and the commit log is kept neater.
	
How can you use the staging area to make sure you have one commit per logical change?

	Check the staging area against the working directory in order to see which
	changes will go into the commit.
	
What are some situations when branches would be helpful 
in keeping your history organized? How would branches help?

	If you want to do extended work on a script that may or may not be included
	in the final version, this will prevent confusion. It will make it easier to
	find and revert to earlier versions without losing other changes to the code.
	If you're doing independent work that will be completed before adding it to 
	a larger project then the same holds true.
	
How do the diagrams help you visualize the branch structure?
	
	The diagrams show eat commit as a node in a tree. Each branch can be traced
	back to its root.
	
What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

	Merging combines two files, adding any additions and deleting any deletions from
	those files. It is represented on the diagram to show that both histories are
	accessible and the two branches are merged into one. 
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	By automatically merging files, git saves time and effort. It can still
	alert the user when there is a conflict. On the other hand, if there isn't
	any conflict and a change is unwanted in the branch being merge into, then
	issues may be introduced that could be avoided by a manual merge.